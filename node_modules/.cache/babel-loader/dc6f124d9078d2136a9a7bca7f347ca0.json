{"ast":null,"code":"import _slicedToArray from \"/Users/stipop/Desktop/StipopRepos/pubnub_stream/chat-component-app-live-event/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/stipop/Desktop/StipopRepos/pubnub_stream/chat-component-app-live-event/src/components/LiveFeedPanelJitsi/LiveFeedPanelJitsi.tsx\";\n\nimport React, { useState } from 'react';\nimport Jitsi from \"react-jitsi\";\nimport { LiveFeedPanelWrapper } from './LiveFeedPanelJitsi.styles';\nvar theme = {\n  main: \"mediumseagreen\"\n};\nexport var LiveFeedPanelJitsi = function LiveFeedPanelJitsi(props) {\n  var _useState = useState('Event-00000-00000'),\n      _useState2 = _slicedToArray(_useState, 2),\n      displayName = _useState2[0],\n      setDisplayName = _useState2[1];\n\n  var _useState3 = useState('Event-Location-00000-00001'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      roomName = _useState4[0],\n      setRoomName = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      password = _useState6[0],\n      setPassword = _useState6[1];\n\n  var _useState7 = useState({}),\n      _useState8 = _slicedToArray(_useState7, 2),\n      loader = _useState8[0],\n      setLoader = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      onCall = _useState10[0],\n      setOnCall = _useState10[1];\n\n  return /*#__PURE__*/React.createElement(LiveFeedPanelWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 3\n    }\n  }, onCall ? /*#__PURE__*/React.createElement(Jitsi, {\n    roomName: roomName,\n    displayName: displayName //password={password}\n    //loadingComponent={loader}\n    ,\n    containerStyle: {\n      width: '100%',\n      height: '100%',\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null));\n};\n\nvar EventNameInput = function EventNameInput() {\n  var _useState11 = useState(\"\"),\n      _useState12 = _slicedToArray(_useState11, 2),\n      inputValue = _useState12[0],\n      setInputValue = _useState12[1];\n\n  return /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: inputValue,\n    placeholder: \"Event name\",\n    onChange: function onChange(ev) {\n      return setInputValue(ev.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  });\n};\n\nvar HostNameInput = function HostNameInput() {\n  var _useState13 = useState(\"\"),\n      _useState14 = _slicedToArray(_useState13, 2),\n      inputValue = _useState14[0],\n      setInputValue = _useState14[1];\n\n  return /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: inputValue,\n    placeholder: \"Your host name\",\n    onChange: function onChange(ev) {\n      return setInputValue(ev.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  });\n};\n\nfunction CreateEventButton() {\n  // initialise with null, but tell TypeScript we are looking for an HTMLInputElement\n  var inputEl = React.useRef(null);\n\n  var onButtonClick = function onButtonClick() {\n    // strict null checks need us to check if inputEl and current exist.\n    // but once current exists, it is of type HTMLInputElement, thus it\n    // has the method focus! âœ…\n    if (inputEl && inputEl.current) {\n      inputEl.current.focus();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: onButtonClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, \"Focus the input\"));\n} // const CreateEventButton = (): JSX.Element => {\n//   const [inputValue, setInputValue] = useState<string>(\"\");\n//   return (\n//       <submit\n//           type=\"text\"\n//           value={inputValue}\n//           placeholder=\"Your host name\"\n//           onChange={(\n//               ev: React.ChangeEvent<HTMLInputElement>,\n//           ): void => setInputValue(ev.target.value)}\n//       />\n//   );\n// };\n\n\nLiveFeedPanelJitsi.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"LiveFeedPanelJitsi\"\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/LiveFeedPanelJitsi/LiveFeedPanelJitsi.tsx\"] = {\n    name: \"LiveFeedPanelJitsi\",\n    docgenInfo: LiveFeedPanelJitsi.__docgenInfo,\n    path: \"src/components/LiveFeedPanelJitsi/LiveFeedPanelJitsi.tsx\"\n  };\n}","map":{"version":3,"sources":["/Users/stipop/Desktop/StipopRepos/pubnub_stream/chat-component-app-live-event/src/components/LiveFeedPanelJitsi/LiveFeedPanelJitsi.tsx"],"names":["theme","main","LiveFeedPanelJitsi","displayName","setDisplayName","useState","roomName","setRoomName","password","setPassword","loader","setLoader","onCall","setOnCall","width","height","alignItems","justifyContent","EventNameInput","inputValue","setInputValue","ev","HostNameInput","inputEl","React","onButtonClick"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from \"react-dom\";\nimport Jitsi from \"react-jitsi\";\nimport { \n  LiveFeedPanelWrapper,\n  FormGroup,\n  Label,\n  Input,\n  Message,\n  Button,\n  ButtonCreateEvent,\n  EventNameWrapper,\n  CreateEventWrapper,\n  HostNameWrapper,\n  CreateEventButtonWrapper\n} from './LiveFeedPanelJitsi.styles';\n\n\nconst theme = {\n  main: \"mediumseagreen\"\n};\n\n\ninterface LiveFeedPanelJitsiProps {\n\n}\n\nexport const LiveFeedPanelJitsi: React.SFC<LiveFeedPanelJitsiProps> = (props: LiveFeedPanelJitsiProps) => {\n  const [displayName, setDisplayName] = useState('Event-00000-00000')\n  const [roomName, setRoomName] = useState('Event-Location-00000-00001')\n  const [password, setPassword] = useState('')\n  const [loader, setLoader] = useState({})\n  const [onCall, setOnCall] = useState(false)\n  return(\n  <LiveFeedPanelWrapper>\n      {onCall\n        ? (\n          <Jitsi\n            roomName={roomName}\n            displayName={displayName}\n            //password={password}\n            //loadingComponent={loader}\n            containerStyle={{\n              width: '100%',\n              height: '100%',\n              alignItems: 'center',\n              justifyContent: 'center',\n            }}\n          />)\n        : (\n\n          <>\n\n          </>)\n      }\n  </LiveFeedPanelWrapper>\n\n)}\n\nconst EventNameInput = (): JSX.Element => {\n  const [inputValue, setInputValue] = useState<string>(\"\");\n  return (\n      <input\n          type=\"text\"\n          value={inputValue}\n          placeholder=\"Event name\"\n          onChange={(\n              ev: React.ChangeEvent<HTMLInputElement>,\n          ): void => setInputValue(ev.target.value)}\n      />\n  );\n};\n\nconst HostNameInput = (): JSX.Element => {\n  const [inputValue, setInputValue] = useState<string>(\"\");\n  return (\n      <input\n          type=\"text\"\n          value={inputValue}\n          placeholder=\"Your host name\"\n          onChange={(\n              ev: React.ChangeEvent<HTMLInputElement>,\n          ): void => setInputValue(ev.target.value)}\n      />\n  );\n};\nfunction CreateEventButton() {\n  // initialise with null, but tell TypeScript we are looking for an HTMLInputElement\n  const inputEl = React.useRef<HTMLInputElement>(null);\n  const onButtonClick = () => {\n    // strict null checks need us to check if inputEl and current exist.\n    // but once current exists, it is of type HTMLInputElement, thus it\n    // has the method focus! âœ…\n    if (inputEl && inputEl.current) {\n      inputEl.current.focus();\n    }\n  };\n  return (\n    <>\n      {/* in addition, inputEl only can be used with input elements. Yay! */}\n      {/* <input ref={inputEl} type=\"text\" /> */}\n      <button onClick={onButtonClick}>Focus the input</button>\n    </>\n  );\n}\n// const CreateEventButton = (): JSX.Element => {\n//   const [inputValue, setInputValue] = useState<string>(\"\");\n//   return (\n//       <submit\n//           type=\"text\"\n//           value={inputValue}\n//           placeholder=\"Your host name\"\n//           onChange={(\n//               ev: React.ChangeEvent<HTMLInputElement>,\n//           ): void => setInputValue(ev.target.value)}\n//       />\n//   );\n// };\n\n"]},"metadata":{},"sourceType":"module"}