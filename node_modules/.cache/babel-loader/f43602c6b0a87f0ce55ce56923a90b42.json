{"ast":null,"code":"import _slicedToArray from \"/Users/stipop/Desktop/StipopRepos/pubnub_stream/chat-component-app-live-event/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/Users/stipop/Desktop/StipopRepos/pubnub_stream/chat-component-app-live-event/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/stipop/Desktop/StipopRepos/pubnub_stream/chat-component-app-live-event/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/stipop/Desktop/StipopRepos/pubnub_stream/chat-component-app-live-event/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _defineProperty from \"/Users/stipop/Desktop/StipopRepos/pubnub_stream/chat-component-app-live-event/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/stipop/Desktop/StipopRepos/pubnub_stream/chat-component-app-live-event/src/AppStateContext.tsx\";\n\nimport PubNub, { generateUUID } from \"pubnub\";\nimport React, { createContext, useContext, useEffect, useReducer } from \"react\";\nimport keyConfiguration from \"./config/pubnub-keys.json\"; //These are shared UUIDs that we can use when needed for messages, users and  internally.\n\nvar UUIDstamped001 = generateUUID(); //This is the configuration for our PubNub connection.\n//We merge the keys from KeyConfiguration with basic configuration options for PubNub\n\nvar pubnubConfig = Object.assign({}, {\n  restore: true,\n  // Ensure that subscriptions will be retained if the network connection is lost\n  uuid: UUIDstamped001,\n  // Our connection unique identifier, very important to avoid being charged for the same user in MAU mode.\n  ssl: true,\n  //Encrypted end to end from  browser to PubNub network.\n  presenceTimeout: 130,\n  // \n  logVerbosity: false,\n  //Show more in the browser console when enabled.\n  heartbeatInterval: 0 //\n\n}, keyConfiguration //Our keys extracted from the config directory in  the  pubnub-keys.json file\n); //This is where you define the Live Event Properties.\n\nexport var appData = {\n  alert: \"green\",\n  simulateLogin: true,\n  presence: false,\n  eventName: \"PubNub Live Event\",\n  //Event name as displayed by components.\n  maxMessagesInList: 200,\n  //Max number of messages displayed at most in the message list. the more messages the more memory will be consumed by the browser.\n  eventId: \"PNEVT001\",\n  //Event ID as displayed by components.\n  messageListFilter: \"language_tone != 'offensive'\",\n  //See README before changing this value.\n  //messageListFilter: `language_tone != 'offensive'`,\n  eventHostAvatar: \"https://robohash.org/ipsaquodeserunt.jpg?size=50x50&set=set1\",\n  //The URL for the host avatar graphic file\n  ownerAvatar: \"https://robohash.org/ipsaquodeserunt.jpg?size=50x50&set=set1\",\n  //The URL for the host avatar graphic file\n  eventAvatar: \"/images/companyLogo@3x.png\",\n  channel: \"liveeventdemo.row1\",\n  messageBuffer: \"\",\n  //Future use.\n  //users: [] ,temnte //Future use.\n  messages: [],\n  //Array of UserMessages, intitalized to empty, Where live event messages are streamed into.\n  events: [],\n  //Future use\n  pubnubConf: pubnubConfig,\n  //This is our configuration for the Live Event Channel used for exchanging messages among event participants.  \n  defaultchannel: {\n    channels: ['liveeventdemo.row1'],\n    //Only one channel, split in different rows if required and load in props, can be set by load balancer.\n    withPresence: true //Presence can be set to false here.\n\n  },\n  pubnub: new PubNub({\n    publishKey: pubnubConfig.publishKey,\n    subscribeKey: pubnubConfig.subscribeKey,\n    restore: true,\n    ssl: true,\n    autoNetworkDetection: true\n  }),\n  message: \"\"\n};\nexport var UserMessage = function UserMessage(payload) {\n  _classCallCheck(this, UserMessage);\n\n  _defineProperty(this, \"id\", void 0);\n\n  _defineProperty(this, \"internalKey\", void 0);\n\n  _defineProperty(this, \"key\", void 0);\n\n  _defineProperty(this, \"senderId\", void 0);\n\n  _defineProperty(this, \"message\", void 0);\n\n  _defineProperty(this, \"UserAvatar\", void 0);\n\n  _defineProperty(this, \"timetoken\", void 0);\n\n  _defineProperty(this, \"senderName\", void 0);\n\n  _defineProperty(this, \"dateFormat\", void 0);\n\n  _defineProperty(this, \"reactions\", void 0);\n\n  _defineProperty(this, \"addMessageReaction\", void 0);\n\n  _defineProperty(this, \"addActions\", void 0);\n\n  var tmpKey = generateUUID();\n  this.internalKey = tmpKey;\n  var data = JSON.parse(payload);\n\n  if (!data.key) {\n    throw new Error('Invalid message payload received: ' + payload);\n  }\n\n  this.id = data.id;\n  this.message = data.message;\n  this.key = data.key;\n  this.UserAvatar = data.UserAvatar;\n  this.timetoken = data.timetoken;\n  this.senderId = data.senderId;\n  this.senderName = data.senderName;\n  this.dateFormat = data.dateFormat;\n  this.reactions = data.reactions;\n  this.addMessageReaction = data.addMessageReaction;\n  this.addActions = data.addActions;\n}; //This is the default settings for your Live Event Chat App.\n//Change these settings to your liking.\n\nexport var AppStateContext = /*#__PURE__*/createContext({}); //This is where the interaction with the back end operates.\n//The functions below are accessible through passing parameters to a dispatch function always accessible in our components. \n\nexport var appStateReducer = function appStateReducer(state, action) {\n  switch (action.type) {\n    case \"ADD_ALERT\":\n      {\n        var merged = _objectSpread(_objectSpread({}, state), {}, {\n          alert: \"sent\"\n        });\n\n        return merged;\n      }\n\n    case \"ADD_MESSAGE\":\n      {\n        //If the messagelist is over our cap we discard the oldest message in the list.\n        if (state.messages.length > state.maxMessagesInList) {\n          state.messages.shift();\n        }\n\n        var _merged = _objectSpread(_objectSpread({}, state), {}, {\n          messages: [].concat(_toConsumableArray(state.messages), [_objectSpread({}, action.payload)])\n        });\n\n        return _merged;\n      }\n    //ADD_MESSAGE adds an incoming message to our internal MessageList buffer.\n\n    case \"ADD_HISTORY\":\n      {\n        //If the messagelist is over our cap we discard the oldest message in the list.\n        if (state.messages.length > state.maxMessagesInList) {\n          state.messages.shift();\n        }\n\n        var _merged2 = _objectSpread(_objectSpread({}, state), {}, {\n          messages: [].concat(_toConsumableArray(state.messages), [_objectSpread({}, action.payload)])\n        });\n\n        return _merged2;\n      }\n\n    case \"SEND_MESSAGE\":\n      {\n        var msgId = generateUUID();\n        state.pubnub.publish({\n          channel: state.channel,\n          sendByPost: true,\n          message: {\n            \"internalKey\": msgId,\n            \"key\": msgId,\n            \"senderId\": \"bc296603-b349-43de-8574-0a3a9392e30a\",\n            \"message\": action.payload.messageContent,\n            \"UserAvatar\": \"https://robohash.org/ipsaquodeserunt.jpg?size=50x50&set=set1\",\n            \"timetoken\": \"1592439990\",\n            \"senderName\": \"Mr. Robot\",\n            \"dateFormat\": null,\n            \"reactions\": null,\n            \"addMessageReaction\": null,\n            \"addActions\": null\n          }\n        });\n        state.alert = \"Message sent...\";\n        return _objectSpread({}, state);\n      }\n\n    case \"ADD_EVENT\":\n      {\n        return _objectSpread({}, state);\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\nexport var AppStateProvider = function AppStateProvider(_ref) {\n  var children = _ref.children;\n\n  var _useReducer = useReducer(appStateReducer, appData),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  useEffect(function () {\n    try {\n      //This where PubNub receives messages subscribed by the channel.\n      state.pubnub.addListener({\n        message: function message(messageEvent) {\n          //console.log(`RECEIVING MESSAGE ${messageEvent.message.key}`);\n          dispatch({\n            type: \"ADD_MESSAGE\",\n            payload: messageEvent.message\n          });\n        }\n      }); //Lets' subscribe on the default channel.\n\n      state.pubnub.subscribe({\n        channels: [state.channel],\n        //Only one channel, split in different rows if required and load in props, can be set by load balancer.\n        withPresence: state.presence\n      }); //In case our App MessageListFilter propery we filter.\n\n      if (state.messageListFilter.length > 0) {\n        console.log(\"Filtering  message: \".concat(state.messageListFilter));\n        state.pubnub.setFilterExpression(state.messageListFilter);\n      }\n    } catch (e) {\n      console.log(\"Subscribe error \".concat(e.message));\n    }\n  }, [appData]);\n  return /*#__PURE__*/React.createElement(AppStateContext.Provider, {\n    value: {\n      state: state,\n      dispatch: dispatch\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport var useAppState = function useAppState() {\n  return useContext(AppStateContext);\n};\n\ntry {\n  // @ts-ignore\n  AppStateProvider.displayName = \"AppStateProvider\"; // @ts-ignore\n\n  AppStateProvider.__docgenInfo = {\n    \"description\": \"\",\n    \"displayName\": \"AppStateProvider\",\n    \"props\": {}\n  }; // @ts-ignore\n\n  if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") // @ts-ignore\n    STORYBOOK_REACT_CLASSES[\"src/AppStateContext.tsx#AppStateProvider\"] = {\n      docgenInfo: AppStateProvider.__docgenInfo,\n      name: \"AppStateProvider\",\n      path: \"src/AppStateContext.tsx#AppStateProvider\"\n    };\n} catch (__react_docgen_typescript_loader_error) {}\n\ntry {\n  // @ts-ignore\n  AppStateProvider.displayName = \"AppStateProvider\"; // @ts-ignore\n\n  AppStateProvider.__docgenInfo = {\n    \"description\": \"\",\n    \"displayName\": \"AppStateProvider\",\n    \"props\": {}\n  }; // @ts-ignore\n\n  if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") // @ts-ignore\n    STORYBOOK_REACT_CLASSES[\"src/AppStateContext.tsx#AppStateProvider\"] = {\n      docgenInfo: AppStateProvider.__docgenInfo,\n      name: \"AppStateProvider\",\n      path: \"src/AppStateContext.tsx#AppStateProvider\"\n    };\n} catch (__react_docgen_typescript_loader_error) {}\n\nAppStateProvider.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"AppStateProvider\"\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/AppStateContext.tsx\"] = {\n    name: \"AppStateProvider\",\n    docgenInfo: AppStateProvider.__docgenInfo,\n    path: \"src/AppStateContext.tsx\"\n  };\n}","map":{"version":3,"sources":["/Users/stipop/Desktop/StipopRepos/pubnub_stream/chat-component-app-live-event/src/AppStateContext.tsx"],"names":["UUIDstamped001","generateUUID","pubnubConfig","restore","uuid","ssl","presenceTimeout","logVerbosity","heartbeatInterval","appData","alert","simulateLogin","presence","eventName","maxMessagesInList","eventId","messageListFilter","eventHostAvatar","ownerAvatar","eventAvatar","channel","messageBuffer","messages","events","pubnubConf","defaultchannel","channels","withPresence","pubnub","publishKey","subscribeKey","autoNetworkDetection","message","UserMessage","tmpKey","data","JSON","AppStateContext","createContext","appStateReducer","action","merged","state","msgId","sendByPost","AppStateProvider","children","dispatch","useReducer","useEffect","type","payload","messageEvent","console","e","useAppState","useContext","STORYBOOK_REACT_CLASSES","docgenInfo","name","path"],"mappings":"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","sourcesContent":["import PubNub, { generateUUID, SubscribeParameters } from \"pubnub\";\nimport React, { createContext, useContext, useEffect, useReducer } from \"react\";\nimport keyConfiguration from \"./config/pubnub-keys.json\";\n\n\n//These are shared UUIDs that we can use when needed for messages, users and  internally.\nconst UUIDstamped001 = generateUUID();\n\n\n//This is the configuration for our PubNub connection.\n//We merge the keys from KeyConfiguration with basic configuration options for PubNub\nconst pubnubConfig = Object.assign(\n  {},\n  {\n      restore: true,       // Ensure that subscriptions will be retained if the network connection is lost\n      uuid: UUIDstamped001, // Our connection unique identifier, very important to avoid being charged for the same user in MAU mode.\n      ssl: true, //Encrypted end to end from  browser to PubNub network.\n      presenceTimeout: 130, // \n      logVerbosity: false, //Show more in the browser console when enabled.\n      heartbeatInterval: 0 //\n  },\n  keyConfiguration //Our keys extracted from the config directory in  the  pubnub-keys.json file\n);\n\ninterface Event {\n  id: string,\n  eventname: string,\n  eventchannel: SubscribeParameters\n}\n//This is where you define the Live Event Properties.\nexport const appData: AppState = {\n  alert: \"green\",\n  simulateLogin: true,\n  presence: false,\n  eventName: \"PubNub Live Event\", //Event name as displayed by components.\n  maxMessagesInList: 200, //Max number of messages displayed at most in the message list. the more messages the more memory will be consumed by the browser.\n  eventId: \"PNEVT001\", //Event ID as displayed by components.\n  messageListFilter: `language_tone != 'offensive'`, //See README before changing this value.\n  //messageListFilter: `language_tone != 'offensive'`,\n  eventHostAvatar: \"https://robohash.org/ipsaquodeserunt.jpg?size=50x50&set=set1\", //The URL for the host avatar graphic file\n  ownerAvatar: \"https://robohash.org/ipsaquodeserunt.jpg?size=50x50&set=set1\", //The URL for the host avatar graphic file\n  eventAvatar: \"/images/companyLogo@3x.png\",\n  channel:\"liveeventdemo.row1\",\n  messageBuffer: \"\", //Future use.\n  //users: [] ,temnte //Future use.\n  messages: [], //Array of UserMessages, intitalized to empty, Where live event messages are streamed into.\n  events: [], //Future use\n  pubnubConf: pubnubConfig,  //This is our configuration for the Live Event Channel used for exchanging messages among event participants.  \n  defaultchannel: {\n    channels: ['liveeventdemo.row1'], //Only one channel, split in different rows if required and load in props, can be set by load balancer.\n    withPresence: true, //Presence can be set to false here.\n  },\n  pubnub: new PubNub({\n    publishKey: pubnubConfig.publishKey,\n    subscribeKey: pubnubConfig.subscribeKey,\n    restore: true,\n    ssl: true,\n    autoNetworkDetection: true\n  }),\n  message: \"\",\n\n}\n\n\n\ninterface EventList {\n  id: string,\n  listname: string,\n  events: Event[],\n}\ninterface User {\n  id: string,\n  username: string,\n}\n\ninterface UserList {\n  id: string,\n  listname: string,\n  users: User[],\n}\nexport interface Message {\n  internalKey: string ;\n\n}\n\nexport class UserMessage implements Message {\n  id: string;\n  internalKey: string;\n  key: string;\n  senderId: string;\n  message: string;\n  UserAvatar?: string;\n  timetoken?: null;\n  senderName: string;\n  dateFormat?: string;\n  reactions?: null;\n  addMessageReaction?: null;\n  addActions?: null;\n\n\n  constructor(payload: string) {\n    const tmpKey = generateUUID();\n    this.internalKey = tmpKey;\n    var data = JSON.parse(payload);\n    if (!data.key ) {\n      throw new Error('Invalid message payload received: ' + payload);\n    }\n    this.id=data.id;\n    this.message = data.message;\n    this.key= data.key;\n    this.UserAvatar= data.UserAvatar;\n    this.timetoken= data.timetoken;\n    this.senderId= data.senderId;\n    this.senderName= data.senderName;\n    this.dateFormat= data.dateFormat;\n    this.reactions= data.reactions;\n    this.addMessageReaction= data.addMessageReaction;\n    this.addActions= data.addActions;\n  }\n}\n\n//This is the default settings for your Live Event Chat App.\n//Change these settings to your liking.\nexport interface AppState {\n  alert: string,\n  simulateLogin: boolean,\n  eventName: string,\n  eventId: string,\n  maxMessagesInList: number,\n  messageListFilter: string,\n  messageBuffer?: string;\n  message: string;\n  ownerAvatar: string,\n  eventHostAvatar: string,\n  eventAvatar: string,\n  channel: string,\n  presence: boolean,\n  //users: UserList, //For login simulation only since Users list is usually not stored here\n  events?: Event[], //For event pickup simulation only since Users list is usually not stored here\n  messages: UserMessage[], //Where the  Messages from all participants to the event are stored.\n  pubnub: PubNub,\n  pubnubConf: typeof pubnubConfig, //Our link to PubNub\n  defaultchannel: SubscribeParameters //The default channel associated to the demo, should be associated with an Event.\n}\n\nexport type Action =\n  | {\n    type: \"ADD_ALERT\",\n    payload: string\n  }\n  | {\n    type: \"ADD_EVENT_LIST\",\n    payload: { listname: string, listId: string, events: [] }\n  }\n  | {\n    type: \"ADD_EVENT\",\n    payload: { id: string, eventname: string, eventchannel: SubscribeParameters }\n  }\n  | {\n    type: \"ADD_MESSAGE_LIST\",\n    payload: { listname: string, listId: string, events: [] }\n  }\n  | {\n    type: \"ADD_MESSAGE\",\n    payload: UserMessage\n  }\n  | {\n    type: \"ADD_HISTORY\",\n    payload: UserMessage\n  }\n  | {\n    type: \"SEND_MESSAGE\",\n    payload: {\n      messageContent: string\n    }\n  | {\n      type: \"ADD_ALERT\",\n      payload: string\n    }\n  }\n\n\n\ninterface AppStateContextProps {\n  state: AppState;\n  dispatch: React.Dispatch<Action>;\n}\n\nexport const AppStateContext = createContext<AppStateContextProps>(\n  {} as AppStateContextProps\n)\n\n//This is where the interaction with the back end operates.\n//The functions below are accessible through passing parameters to a dispatch function always accessible in our components. \nexport const appStateReducer = (state: AppState, action: Action): AppState => {\n  switch (action.type) {\n\n    case \"ADD_ALERT\": {\n\n      const merged: AppState = {\n        ...state,\n        alert: \"sent\"\n      };\n      return merged;\n\n    }\n    case \"ADD_MESSAGE\": {\n      //If the messagelist is over our cap we discard the oldest message in the list.\n      if (state.messages.length > state.maxMessagesInList ){\n        state.messages.shift();\n      }\n\n      const merged: AppState = {\n        ...state,\n        messages: [\n          ...state.messages as Array<UserMessage>,\n          {\n            ...action.payload as UserMessage\n          }\n        ]\n      };\n\n      return merged;\n\n    }\n    //ADD_MESSAGE adds an incoming message to our internal MessageList buffer.\n    case \"ADD_HISTORY\": {\n      //If the messagelist is over our cap we discard the oldest message in the list.\n      if (state.messages.length > state.maxMessagesInList) {\n        state.messages.shift();\n      }\n\n      const merged: AppState = {\n        ...state,\n        messages: [\n          ...state.messages as Array<UserMessage>,\n          {\n            ...action.payload as UserMessage\n          }\n        ]\n      };\n\n      return merged;\n\n    }\n    case \"SEND_MESSAGE\": {\n\n      const msgId: string = generateUUID();\n      state.pubnub.publish({\n        channel: state.channel,\n        sendByPost: true,\n        message: {\n          \"internalKey\": msgId,\n          \"key\": msgId,\n          \"senderId\": \"bc296603-b349-43de-8574-0a3a9392e30a\",\n          \"message\": action.payload.messageContent,\n          \"UserAvatar\": \"https://robohash.org/ipsaquodeserunt.jpg?size=50x50&set=set1\",\n          \"timetoken\": \"1592439990\",\n          \"senderName\": \"Mr. Robot\",\n          \"dateFormat\": null,\n          \"reactions\": null,\n          \"addMessageReaction\": null,\n          \"addActions\": null\n      },\n      });\n      state.alert = \"Message sent...\";\n      return { ...state }\n    }\n\n    case \"ADD_EVENT\": {\n\n      return { ...state }\n    }\n\n    default: {\n      return state\n    }\n\n\n  }\n}\n\n\n\nexport const AppStateProvider = ({ children }: React.PropsWithChildren<{}>) => {\n\n  const [state, dispatch] = useReducer(appStateReducer, appData)\n  useEffect(() => {\n    try {\n \n      //This where PubNub receives messages subscribed by the channel.\n      state.pubnub.addListener({\n        message: (messageEvent) => {\n          //console.log(`RECEIVING MESSAGE ${messageEvent.message.key}`);\n          dispatch({\n            type: \"ADD_MESSAGE\",\n            payload: messageEvent.message\n          });\n        },\n\n      });\n\n\n      //Lets' subscribe on the default channel.\n      state.pubnub.subscribe(\n        {\n          channels: [state.channel], //Only one channel, split in different rows if required and load in props, can be set by load balancer.\n          withPresence: state.presence,\n\n        }\n      );\n\n\n      //In case our App MessageListFilter propery we filter.\n      if (state.messageListFilter.length > 0) {\n        console.log(`Filtering  message: ${state.messageListFilter}`);\n        state.pubnub.setFilterExpression(state.messageListFilter);\n      }\n\n    } catch (e) {\n      console.log(`Subscribe error ${e.message}`);\n    }\n\n  }, [appData]);\n\n\n  return (\n    <AppStateContext.Provider value={{ state, dispatch }}>\n      {children}\n    </AppStateContext.Provider>\n  );\n}\n\nexport const useAppState = () => {\n  return useContext(AppStateContext)\n}\ntry {\n    // @ts-ignore\n    AppStateProvider.displayName = \"AppStateProvider\";\n    // @ts-ignore\n    AppStateProvider.__docgenInfo = { \"description\": \"\", \"displayName\": \"AppStateProvider\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/AppStateContext.tsx#AppStateProvider\"] = { docgenInfo: AppStateProvider.__docgenInfo, name: \"AppStateProvider\", path: \"src/AppStateContext.tsx#AppStateProvider\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    AppStateProvider.displayName = \"AppStateProvider\";\n    // @ts-ignore\n    AppStateProvider.__docgenInfo = { \"description\": \"\", \"displayName\": \"AppStateProvider\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/AppStateContext.tsx#AppStateProvider\"] = { docgenInfo: AppStateProvider.__docgenInfo, name: \"AppStateProvider\", path: \"src/AppStateContext.tsx#AppStateProvider\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"]},"metadata":{},"sourceType":"module"}